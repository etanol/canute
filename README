                                     ABOUT
                                     ¯¯¯¯¯
Canute is a small command line utility to transfer files and directories over
the network. It doesn't have authentication nor any other kind of privileges.
It can be handy in a number of situations, specially on LAN.

For example, imagine you are with a friend and he has a big CD/DVD image you
want (whatever Linux distro). Depending on the operating systems you have,
there are some ways of doing the copy:

   - FTP: Set up a server (you need root privileges for that) and then allow
     anonnymous upload, create a new account for your friend or give him access
     using your account. Don't forget a good FTP client

   - HTTP: Maybe handier than FTP but upload is a bit trickier.

   - SFTP/SSH: This is account based so give new accounts or your own.

   - RSync: If you want to use it two way you need to transfer over SSH, then
     you are in the same situation as before. Otherwise both of you should
     configure a server with the appropiate modules (which, again, requires
     root privileges).

   - NFS: Hasefroch does not easily support it. This is not as hard as it used
     to be thanks to the modern Linux distributions. But you need at least two
     servers: the port mapper and the nfsd. Not mentioning the kernel support,
     the permission grant from the server (/etc/hosts.allow), etc...  And it's
     quite slow for big files.

   - SMB: Very similar to NFS but slower.

   - Finally you can waste a CD/DVD burning that ISO image and giving it to
     your friend.

With Canute you use the same binary for all tasks: sending or receiving. No
need for installation, just the damn binary.


                                     USAGE
                                     ¯¯¯¯¯
There are two couples of concepts: server-client and sender-receiver. The
server-client pair only defines who (of the two peers) has to execute the
application first. The sender-receiver defines the direction of the transfer.

Let's have host A and host B. The following scenarios show the commands and the
order in which must be executed.

··· Scenario 1. A sends files to B. This is the usual way of working.

host_A$ canute send file1 file2 ...
host_B$ canute get host_A

··· Scenario 2. A sends files to B, but A is behind a firewall and cannot open
    ports (NAT/PAT)

host_B$ canute getserv
host_A$ canute sendto host_B file1 file2 ...

We see how server-client roles can be switched independently from
server-receiver roles. The server is the peer who waits for the client to be
connected. The server is not persistent and the port is closed when it
finishes. That means you don't have to worry about leaving that port opened on
your router if you want to do Internet transfers.

You can also choose a different port than the default (1121/tcp) specifying it
after the Canute sub-command, like this

host_A$ canute send:5030 file1 file2 ...
host_B$ canute get:5030 host_A

Or else:

host_B$ canute getserv:5030
host_A$ canute sendto:5030 host_B file1 file2 ...

Note that if a directory is found, in the command line, then is sent
recursively.


                               SOURCE CODE FILES
                               ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
canute.h: Dirty tricks to make the rest of the code portable and as #ifdef
          clean as possible.

canute.c: Main function. Command line parsing and role selection
          (server-client, sender-receiver).

feedback.c: User feedback module, progress bar, information and timing.

net.c: Basic network management functions. Connection handling and block
       transfer.

protocol.c: Sender-receiver negotiations and content transfers.

util.c: Unclassified utility functions.


                                    CREDITS
                                    ¯¯¯¯¯¯¯
* Original idea and current maintenance: C2H5OH (http://etanol.doesntexist.org)
* Patch contributions: MKD (http://www.claudiocamacho.org)
* Testing aid: Tito Houzy, MKD
* Initial win32 port: Plimo San

